#include<stdio.h>
#include<conio.h>
#define N 100
int ct=0;
int ppt=0;

int nk=100;
int tick=0;
struct process{
	int at,bt,prt,pid,copy_array[N],cbt;
};


struct process2{
	int at2,bt2,prt2,pid2;
	int wt,ta;
	int flage;
}proc2[N];

void copyfun(struct process record){
	
	
proc2[ppt].bt2=record.bt;
proc2[ppt].at2=record.at;
proc2[ppt].prt2=record.prt;
proc2[ppt].pid2=record.pid;


	ppt++;
		
}
//-------------------------------------------------------
void b_sort(struct process2 temp[],int n)
{
	struct process2 t;
	int i,j;
	for(i=1;i<n;i++)
		for(j=0;j<n-i;j++){
			if(temp[j].at2 > temp[j+1].at2){
				t = temp[j];
				temp[j] = temp[j+1];
				temp[j+1] = t;
			}
		}
}



void RR(struct process2 P[],int n)
{
	int pflag=0,t,tcurr=0,k,i,Q=0;
	int sumw=0,sumt=0;
	float avgwt=0.0,avgta=0.0;
struct 	process2 temp1[10],temp2[10];	

	for(i=0;i<n;i++)
		temp1[i]=P[i];

	b_sort(temp1,ct);
	
	for(i=0;i<n;i++)
		temp2[i]=temp1[i];
	
	printf("\n Enter quantum time : ");
	scanf("%d",&Q);
	
	for(k=0;;k++){
		if(k>n-1)
			k=0;
		if(temp1[k].bt2>0)
			printf("  %d  %s",tcurr,temp1[k].pid2);
		t=0;
		while(t<Q && temp1[k].bt2 > 0){
			t++;
			tcurr++;
			temp1[k].bt2--;
		}  
		if(temp1[k].bt2 <= 0 && temp1[k].flage != 1){
			temp1[k].wt = tcurr - temp2[k].bt2 - temp1[k].at2;
			temp1[k].ta = tcurr - temp1[k].at2;
			pflag++;
			temp1[k].flage = 1;
			sumw+=temp1[k].wt;
			sumt+=temp1[k].ta;
		}
		if(pflag == n)
			break;
	}
	printf("  %d",tcurr);
	avgwt = (float)sumw/n;
	avgta = (float)sumt/n;
	printf("\n\n Average waiting time = %0.2f\n Average turn-around = %0.2f.",avgwt,avgta);
}





//-----------------------------------------------------
void RoundRobin(){
	
	RR(proc2,ct);
	
}


int main(){
	
	int nump,j=0,i=0,k=1,count=0,flag=0,time;
	printf("Enter the number of processes :");
	scanf("%d",&nump);
	struct process proc[nump];
for(i=0;i<nump;i++)
    {		printf("Enter the process id here\n ");
			scanf("%d",&proc[i].pid);
			printf("Enter the arrival time of %d :",proc[i].pid);
			scanf("%d",&proc[i].at);
			printf("Enter the burst time of %d :",proc[i].pid);
			scanf("%d",&proc[i].bt);
			proc[i].cbt=proc[i].bt;
			printf("Enter the priority time of %d :",proc[i].pid);
			scanf("%d",&proc[i].prt);}
			int fl=0;
			
		for(int i=0;i<nump;i++){  //1.1
		int btd=proc[i].cbt;
		
		int scale=0;
		k=1;
			for(int j=0;j<btd;j++){  //1.2
	//	printf("\n  the burst time= %d of  process :%d  of value j:%d",proc[i].bt,proc[i].pid,j);
			
			if(i==0 && proc[i].at==0 && scale==0){
				for(int l=0;l<proc[i+1].at;l++){
					count++;
					proc[i].bt--;
					
				}
			fl=1;
				printf("\n%d --------- %d",proc[i].at,count);
				time=proc[i].at+count;
				
			}
			
			
			if(i==(nump-1)){
				if(tick==1)count--;
				for(int m=0;m<proc[i].bt;m++){
					count++;
					proc[i].bt--;
				
				}
	printf("\n%d --------- %d",time,count);
	break;}			
			
			
				
				if( count!=0 && ((count%2)==0) && (proc[k+i].prt>proc[i].prt)){
					
					printf("\n%d --------- %d",time,count);
					time=count;
	
					count++;
					proc[i].bt--;
					
				
					flag++;
					k++;
					scale=1;
					continue;
					
					
				}
				
				
				else if( count!=0 && ((count%2)==0) && (proc[i+k].prt < proc[i].prt)){
					if(fl!=1)
					printf("\n%d --------- %d",time,count);//printing the first quque
					fl=0;
					
					if(proc[i].bt>0){
						ct++;
									copyfun(proc[i]);}
				scale=1;
				time=count;
				count++;
			
				
				
				proc[i+1].bt--;
				tick=1;
					break;
					}
				
				else
				{
				
				flag++;
				proc[i].bt--;
				count++;
				scale=1;
			
				
				}
				
	
				
			}
		}
		
RoundRobin();			

	
	
}
